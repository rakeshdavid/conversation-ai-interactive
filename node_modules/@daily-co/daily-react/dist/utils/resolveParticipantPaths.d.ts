import { ExtendedDailyParticipant } from '../DailyParticipants';
import type { NumericKeys } from '../types/NumericKeys';
import type { Paths } from '../types/paths';
import type { PathValue } from '../types/pathValue';
declare type ResolveParticipantPathsReturnType<T extends ExtendedDailyParticipant, P extends Paths<T>[]> = {
    [K in keyof P]: K extends NumericKeys ? PathValue<T, P[K]> : never;
};
export declare const resolveParticipantPaths: <T extends ExtendedDailyParticipant, P extends Paths<T, keyof T>[]>(participant: T | null, paths: P) => ResolveParticipantPathsReturnType<T, P>;
export {};
