import React from 'react';
interface DailyVideoDimensions {
    aspectRatio: number;
    height: number;
    width: number;
}
interface Props extends Omit<React.VideoHTMLAttributes<HTMLVideoElement>, 'onResize'> {
    /**
     * For local user-facing camera streams, we'll automatically mirror the video.
     */
    automirror?: boolean;
    /**
     * Defines whether the video should be fully contained or cover the box. Default: 'contain'.
     */
    fit?: 'contain' | 'cover';
    /**
     * Forces the video to be mirrored, if set.
     */
    mirror?: boolean;
    /**
     * Optional styles to apply, when video is playable.
     */
    playableStyle?: React.CSSProperties;
    /**
     * Optional callback, which is triggered whenever the video's rendered width or height changes.
     * Returns the video's native width, height and aspectRatio.
     */
    onResize?(dimensions: DailyVideoDimensions): void;
    /**
     * Identifies the participant for which a video stream should be rendered.
     */
    sessionId: string;
    /**
     * Defines the track type being used.
     */
    type: 'video' | 'screenVideo' | 'rmpVideo';
}
export declare const DailyVideo: React.ForwardRefExoticComponent<Props & React.RefAttributes<HTMLVideoElement>>;
export {};
