import { ReadOnlySelectorFamilyOptions, ReadOnlySelectorOptions, RecoilValueReadOnly, SerializableParam } from 'recoil';
interface EqualSelectorOptions<T> extends Pick<ReadOnlySelectorOptions<T>, 'key' | 'get'> {
    equals: (a: T, b: T) => boolean;
}
/**
 * Same API as [selector](https://recoiljs.org/docs/api-reference/core/selector), but with an additional `equals` key.
 * Allows to run custom equality checks before returning a new calculated value.
 * Use this, when returning non-primitive types from state.
 * Resource: https://github.com/facebookexperimental/Recoil/issues/1416#issuecomment-1044953271
 */
export declare function equalSelector<T>(options: EqualSelectorOptions<T>): RecoilValueReadOnly<T>;
interface EqualSelectorFamilyOptions<T, P extends SerializableParam> extends Pick<ReadOnlySelectorFamilyOptions<T, P>, 'key' | 'get'> {
    equals: (a: T, b: T) => boolean;
}
/**
 * Same API as [selectorFamily](https://recoiljs.org/docs/api-reference/utils/selectorFamily/), but with an additional `equals` key.
 * Allows to run custom equality checks before returning a new calculated value.
 * Use this, when returning non-primitive types from state.
 * Resource: https://github.com/facebookexperimental/Recoil/issues/1416#issuecomment-1168603409
 */
export declare function equalSelectorFamily<T, P extends SerializableParam>(options: EqualSelectorFamilyOptions<T, P>): (param: P) => RecoilValueReadOnly<T>;
export {};
