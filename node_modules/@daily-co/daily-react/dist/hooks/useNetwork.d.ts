import { DailyEventObject } from '@daily-co/daily-js';
interface UseNetworkArgs {
    onNetworkConnection?(ev: DailyEventObject<'network-connection'>): void;
    onNetworkQualityChange?(ev: DailyEventObject<'network-quality-change'>): void;
}
/**
 * Returns current information about network quality and topology.
 * Allows to setup event listeners for daily's [network events](https://docs.daily.co/reference/daily-js/events/network-events).
 */
export declare const useNetwork: ({ onNetworkConnection, onNetworkQualityChange, }?: UseNetworkArgs) => {
    getStats: () => Promise<{
        latest: {
            timestamp: number;
            recvBitsPerSecond: number | null;
            sendBitsPerSecond: number | null;
            availableOutgoingBitrate: number | null;
            networkRoundTripTime: number | null;
            videoRecvBitsPerSecond: number | null;
            videoSendBitsPerSecond: number | null;
            audioRecvBitsPerSecond: number | null;
            audioSendBitsPerSecond: number | null;
            videoRecvPacketLoss: number | null;
            videoSendPacketLoss: number | null;
            audioRecvPacketLoss: number | null;
            audioSendPacketLoss: number | null;
            totalSendPacketLoss: number | null;
            totalRecvPacketLoss: number | null;
            videoRecvJitter: number | null;
            videoSendJitter: number | null;
            audioRecvJitter: number | null;
            audioSendJitter: number | null;
        };
        worstVideoRecvPacketLoss: number;
        worstVideoSendPacketLoss: number;
        worstAudioRecvPacketLoss: number;
        worstAudioSendPacketLoss: number;
        worstVideoRecvJitter: number;
        worstVideoSendJitter: number;
        worstAudioRecvJitter: number;
        worstAudioSendJitter: number;
        averageNetworkRoundTripTime: number;
    } | undefined>;
    quality: number;
    threshold: "good" | "low" | "very-low";
    topology: "sfu" | "peer" | "none";
};
export {};
