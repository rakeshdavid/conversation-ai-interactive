import { ExtendedDailyParticipant } from '../DailyParticipants';
import type { NumericKeys } from '../types/NumericKeys';
import type { Paths } from '../types/paths';
import type { PathValue } from '../types/pathValue';
declare type PropertyType = {
    id: string;
    property: Paths<ExtendedDailyParticipant>;
};
declare type PropertiesType = {
    id: string;
    properties: Paths<ExtendedDailyParticipant>[];
};
/**
 * Stores all property paths for a given participant.
 */
export declare const participantPropertyPathsState: (param: string) => import("recoil").RecoilState<any[]>;
/**
 * Stores resolved values for each participant and property path.
 */
export declare const participantPropertyState: (param: PropertyType) => import("recoil").RecoilState<any>;
/**
 * Stores resolved values for each participant and property path.
 */
export declare const participantPropertiesState: (param: PropertiesType) => import("recoil").RecoilValueReadOnly<any>;
declare type UseParticipantPropertyReturnType<T extends ExtendedDailyParticipant, P extends Paths<T> | Paths<T>[]> = P extends Paths<T>[] ? {
    [K in keyof P]: K extends NumericKeys ? PathValue<T, P[K]> : unknown;
} : P extends Paths<T> ? PathValue<T, P> : never;
/**
 * Returns a participant's property that you subscribe to.
 * @param participantId The participant's session_id.
 * @param propertyPaths the array of participant property that you want to subscribe to.
 */
export declare const useParticipantProperty: <T extends ExtendedDailyParticipant = ExtendedDailyParticipant, P extends Paths<T, keyof T> | [Paths<T, keyof T>, ...Paths<T, keyof T>[]] = Paths<T, keyof T> | [Paths<T, keyof T>, ...Paths<T, keyof T>[]]>(participantId: string, propertyPaths: P) => UseParticipantPropertyReturnType<T, P>;
export {};
