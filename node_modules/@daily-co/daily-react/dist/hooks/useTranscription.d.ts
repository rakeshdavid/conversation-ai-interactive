import { DailyEventObject, DailyEventObjectAppMessage } from '@daily-co/daily-js';
import { Transcription } from '../DailyTranscriptions';
interface UseTranscriptionArgs {
    onTranscriptionStarted?(ev: DailyEventObject<'transcription-started'>): void;
    onTranscriptionStopped?(ev: DailyEventObject<'transcription-stopped'>): void;
    onTranscriptionError?(ev: DailyEventObject<'transcription-error'>): void;
    /**
     * @deprecated Please use onTranscriptionMessage instead.
     */
    onTranscriptionAppData?(ev: DailyEventObjectAppMessage<Transcription>): void;
    onTranscriptionMessage?(ev: DailyEventObject<'transcription-message'>): void;
}
export declare const useTranscription: ({ onTranscriptionAppData, onTranscriptionError, onTranscriptionMessage, onTranscriptionStarted, onTranscriptionStopped, }?: UseTranscriptionArgs) => {
    startTranscription: (options?: import("@daily-co/daily-js").DailyTranscriptionDeepgramOptions | undefined) => void;
    stopTranscription: () => void;
    error?: boolean | undefined;
    isTranscribing: boolean;
    transcriptionStartDate?: Date | undefined;
    startedBy?: string | undefined;
    updatedBy?: string | undefined;
    transcriptions: Transcription[];
    language?: string | undefined;
    model?: string | undefined;
    tier?: string | undefined;
    profanity_filter?: boolean | undefined;
    redact?: boolean | string[] | boolean[] | undefined;
    endpointing?: number | boolean | undefined;
    punctuate?: boolean | undefined;
    extra?: Record<string, any> | undefined;
    includeRawResponse?: boolean | undefined;
};
export {};
